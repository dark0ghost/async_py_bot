Metadata-Version: 2.1
Name: asyncpg
Version: 0.18.3
Summary: An asyncio PosgtreSQL driver
Home-page: https://github.com/MagicStack/asyncpg
Author: MagicStack Inc
Author-email: hello@magic.io
License: Apache License, Version 2.0
Platform: macOS
Platform: POSIX
Platform: Windows
Classifier: Development Status :: 5 - Production/Stable
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: POSIX
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Database :: Front-Ends
Provides: asyncpg
Requires-Python: >=3.5.0
Provides-Extra: dev
Provides-Extra: test
Provides-Extra: docs
Provides-Extra: dev
Requires-Dist: Cython (==0.29); extra == 'dev'
Requires-Dist: pytest (>=3.6.0); extra == 'dev'
Requires-Dist: Sphinx (~=1.7.3); extra == 'dev'
Requires-Dist: sphinxcontrib-asyncio (~=0.2.0); extra == 'dev'
Requires-Dist: sphinx-rtd-theme (~=0.2.4); extra == 'dev'
Requires-Dist: flake8 (~=3.5.0); extra == 'dev'
Provides-Extra: dev
Requires-Dist: uvloop (>=0.8.0); (platform_system != "Windows") and extra == 'dev'
Provides-Extra: docs
Requires-Dist: Sphinx (~=1.7.3); extra == 'docs'
Requires-Dist: sphinxcontrib-asyncio (~=0.2.0); extra == 'docs'
Requires-Dist: sphinx-rtd-theme (~=0.2.4); extra == 'docs'
Provides-Extra: test
Requires-Dist: flake8 (~=3.5.0); extra == 'test'
Provides-Extra: test
Requires-Dist: uvloop (>=0.8.0); (platform_system != "Windows") and extra == 'test'

asyncpg -- A fast PostgreSQL Database Client Library for Python/asyncio
=======================================================================

.. image:: https://travis-ci.org/MagicStack/asyncpg.svg?branch=master
    :target: https://travis-ci.org/MagicStack/asyncpg

.. image:: https://ci.appveyor.com/api/projects/status/9rwppnxphgc8bqoj/branch/master?svg=true
    :target: https://ci.appveyor.com/project/magicstack/asyncpg

.. image:: https://img.shields.io/pypi/v/asyncpg.svg
    :target: https://pypi.python.org/pypi/asyncpg

**asyncpg** is a database interface library designed specifically for
PostgreSQL and Python/asyncio.  asyncpg is an efficient, clean implementation
of PostgreSQL server binary protocol for use with Python's ``asyncio``
framework.  You can read more about asyncpg in an introductory
`blog post <http://magic.io/blog/asyncpg-1m-rows-from-postgres-to-python/>`_.

asyncpg requires Python 3.5 or later and is supported for PostgreSQL
versions 9.2 to 11.


Documentation
-------------

The project documentation can be found
`here <https://magicstack.github.io/asyncpg/current/>`_.


Performance
-----------

In our testing asyncpg is, on average, **3x** faster than psycopg2
(and its asyncio variant -- aiopg).

.. image:: performance.png
    :target: http://magic.io/blog/asyncpg-1m-rows-from-postgres-to-python/

The above results are a geometric mean of benchmarks obtained with PostgreSQL
`client driver benchmarking toolbench <https://github.com/MagicStack/pgbench>`_.


Features
--------

asyncpg implements PostgreSQL server protocol natively and exposes its
features directly, as opposed to hiding them behind a generic facade
like DB-API.

This enables asyncpg to have easy-to-use support for:

* **prepared statements**
* **scrollable cursors**
* **partial iteration** on query results
* automatic encoding and decoding of composite types, arrays,
  and any combination of those
* straightforward support for custom data types


Installation
------------

asyncpg is available on PyPI and has no dependencies.
Use pip to install::

    $ pip install asyncpg


Basic Usage
-----------

.. code-block:: python

    import asyncio
    import asyncpg

    async def run():
        conn = await asyncpg.connect(user='user', password='password',
                                     database='database', host='127.0.0.1')
        values = await conn.fetch('''SELECT * FROM mytable''')
        await conn.close()

    loop = asyncio.get_event_loop()
    loop.run_until_complete(run())


License
-------

asyncpg is developed and distributed under the Apache 2.0 license.


